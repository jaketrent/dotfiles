[user]
	name = jaketrent
	email = trent.jake@gmail.com
[alias]
    # View the SHA, description, and history graph of the latest 20 commits
    l = log --pretty='format:%C(yellow)%h %Creset- %C(white)%s %C(bold blue)[%an]%Creset %Cgreen%cr' -n 20 --graph
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    # d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    d = !"git diff -- ':!package-lock.json' ':!yarn.lock'"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # List modified files in last commit
    dl = "!git ll -1"
    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to an track remote branch
    go = checkout --track
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Undo a `git push`
    undopush = push -f origin HEAD^:master
    # Search through codebase
    grep = grep -Ii
    # Search from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    # Grep on filename
    f = "!git ls-files | grep -i"
    # reset to last commit on HEAD
    rh = reset --hard HEAD
    # prune tracked branches on origin
    prn = remote prune origin
    # shotgun
    #pull = pull; afplay ~/dev/dotfiles/osx/shotgun.mp3
    # heroku remote
    #git remote add heroku git@heroku.com:$1.git


    # tired fingers
    # branches
    b = branch
    # checkout
    co = checkout
    # status
    st = status
    # push origin master
    pom = push origin master
    phm = push heroku master
    # push current branch
    pb = push origin HEAD
    pr = pull-request
    dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
    ds = !"git diff --staged -- ':!package-lock.json' ':!yarn.lock'"
  
    # list aliases
    shortcuts = "!git config -l | grep alias | cut -c 7-"

    # submit to gerrit
    gerrit-push = "!bash -c ' \
    local_branch=$(git rev-parse --abbrev-ref HEAD); \
    git push origin $local_branch:refs/for/master'"

    p = pull --rebase

    # list changed files in commit (short diff)
    d = diff-tree --no-commit-id --name-only -r HEAD

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow black
    frag = magenta black
    old = red black
    new = green black

[color "status"]
    plain = white
    added = yellow
    changed = green
    untracked = cyan

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = nowarn

[core]
	editor = vim
	excludesfile = /Users/jaketrent/.gitignore
	autocrlf = input

[log]
    abbrevCommit = true
    #date = short

[web]
    browser = google-chrome

[heroku]
	account = personal
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[push]
	default = simple
[pager]
	# diff = diff-so-fancy | less --tabs=4 -RFX
	# show = diff-so-fancy | less --tabs=4 -RFX
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
