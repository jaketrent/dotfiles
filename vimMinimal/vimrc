" start with https://raw.githubusercontent.com/mhinz/vim-galore/master/static/minimal-vimrc.vim

" use vim, not vi. vimrc will set anyway, but being explicit
set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

set autoindent             " Indent according to previous line.
set expandtab              " Use spaces instead of tabs.
set softtabstop =2         " Tab key indents by 2 spaces.
set shiftwidth  =2         " >> indents by 2 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo


" custom

set autochdir               " uses current dir when using :split
set directory=~/.vim/tmp    " set swap file location
set number                  " turn on line numbers
set relativenumber          " turn on relative line numbers
set wrap!                   " turn off line wrap
set omnifunc=syntaxcomplete#Complete " turn on omni completion

" Asynchronous Lint Engine (ALE)
" Limit linters used for js to just flow; can add more
" from https://flow.org/en/docs/editors/vim/
let g:ale_linters = { 'javascript': ['flow'], 'typescript': [] }
highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
highlight clear ALEWarningSign " otherwise uses error bg color (typically red)
let g:ale_sign_error = 'X' " could use emoji
let g:ale_sign_warning = '?' " could use emoji
let g:ale_statusline_format = ['X %d', '? %d', '']
" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter% says %s'
" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>

" prettier
let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'css': ['prettier'],
\}
let g:ale_fix_on_save = 1

" flow-vim
" from https://github.com/flowtype/vim-flow
" let g:flow#enable = 1 " flow check on save
" let g:flow#flowpath = './node_modules/.bin/flow' " custom path to flow (if `flow` not in PATH)
" let g:flow#showruickfix = 0 " set to 0 if rather use ale quicklist
nnoremap <leader>ft :FlowType<cr>

" autocomplete 

" remap insert mode key - allows enter key to select the C-N autocomplete menu selection
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>" 


" " simulate system register copy-paste for in-terminal/non-gui vim
" function! ClipboardOrXclip(command, register)
"     if a:register !~ '[+*]' || has('xterm_clipboard') || has('gui_running')
"         " Just return the original command if the clipboard is accessible
"         " or it's not a register that should be handled by xsel
"         return a:command
"     endif
" 
"     " macos clipboard
"     return "<Esc>:r !pbcopy<CR>"
" 
" 
"     " linux tool for clipboard - http://www.vergenet.net/~conrad/software/xsel/#intro
"     " if a:register == '+'
"     "     return "<Esc>:r !xsel -bo<CR>"
"     " else
"     "     return "<Esc>:r !xsel -po<CR>"
"     " endif
" endfunction
" nnoremap <silent> <expr> p ClipboardOrXclip('p', v:register)

" macos clipboard setup

" from http://vim.wikia.com/wiki/Mac_OS_X_clipboard_sharing
" set clipboard=unnamed

" vmap y :.w !pbcopy<CR><CR>


function! ClipboardOrPbcopy(command, register)
    echom "The register.............."
    echom a:register
    if a:register !~ '[+*]' || has('clipboard') || has('xterm_clipboard') || has('gui_running')
        " Just return the original command if the clipboard is accessible
        " or it's not a register that should be handled by the OS
        return a:command
    endif

    return ":.w !pbcopy<CR><CR>" " use xsel on linux?
endfunction
nnoremap <silent> <expr> y ClipboardOrPbcopy('y', v:register)

" fzf
set rtp+=/usr/local/opt/fzf
"
" Color/Theme
colorscheme snazzy

let g:lightline = {
      \ 'colorscheme': 'snazzy',
      \ }

set noswapfile
